C51 COMPILER V9.51   SERVANT                                                               06/14/2016 18:11:39 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE SERVANT
OBJECT MODULE PLACED IN .\Servant.obj
COMPILER INVOKED BY: D:\MDK\MDK4\C51\BIN\C51.EXE ..\Servant.c BROWSE DEBUG OBJECTEXTEND TABS(2) OBJECT(.\Servant.obj)

line level    source

   1          #include  "stdio.h"
   2          #include  "string.h"
   3          #include  "intrins.h"
   4          #include  "reg51.h"
   5          
   6          //定义SJA1000的基址
   7          #define SJA_BaseAdr  0XFE00       //P2.0
   8          // 控制寄存器
   9          #define         REG_CONTROL       SJA_BaseAdr+0x00       //内部控制寄存器
  10          #define         REG_COMMAND       SJA_BaseAdr+0x01       //命令寄存器
  11          #define         REG_STATUS        SJA_BaseAdr+0x02       //状态寄存器
  12          #define         REG_INTERRUPT     SJA_BaseAdr+0x03       //中断寄存器
  13          #define         REG_INTENABLE     SJA_BaseAdr+0x04       //中断使能寄存器
  14          #define         REG_BTR0          SJA_BaseAdr+0x06       //总线定时寄存器0
  15          #define         REG_BTR1          SJA_BaseAdr+0x07       //总线定时寄存器1
  16          #define         REG_OCR           SJA_BaseAdr+0x08       //输出控制寄存器
  17          #define         REG_TEST          SJA_BaseAdr+0x09       //测试寄存器
  18          
  19          #define         REG_RESVER1       SJA_BaseAdr+0x0A       //保留1
  20          #define         REG_ARBITRATE     SJA_BaseAdr+0x0B       //仲裁丢失捕捉
  21          #define         REG_ERRCATCH      SJA_BaseAdr+0x0C       //错误代码捕捉
  22          #define         REG_ERRLIMIT      SJA_BaseAdr+0x0D       //错误报警限额
  23          
  24          #define         REG_RXERR         SJA_BaseAdr+0x0E         //接收错误计数器
  25          #define         REG_TXERR         SJA_BaseAdr+0x0F         //发送错误计数器
  26          
  27          #define         REG_ACR1          SJA_BaseAdr+0x10       //验收代码寄存器
  28          #define         REG_ACR2          SJA_BaseAdr+0x11       //验收代码寄存器
  29          #define         REG_ACR3          SJA_BaseAdr+0x12       //验收代码寄存器
  30          #define         REG_ACR4          SJA_BaseAdr+0x13       //验收代码寄存器
  31          #define         REG_AMR1          SJA_BaseAdr+0x14       //验收屏蔽寄存器
  32          #define         REG_AMR2          SJA_BaseAdr+0x15       //验收屏蔽寄存器
  33          #define         REG_AMR3          SJA_BaseAdr+0x16       //验收屏蔽寄存器
  34          #define         REG_AMR4          SJA_BaseAdr+0x17       //验收屏蔽寄存器
  35          
  36          // 发送缓冲区寄存器
  37          #define         REG_TXBuffer1     SJA_BaseAdr+0x10         //发送缓冲区1
  38          #define         REG_TXBuffer2     SJA_BaseAdr+0x11         //发送缓冲区2
  39          #define         REG_TXBuffer3     SJA_BaseAdr+0x12         //发送缓冲区3
  40          #define         REG_TXBuffer4     SJA_BaseAdr+0x13         //发送缓冲区4
  41          #define         REG_TXBuffer5     SJA_BaseAdr+0x14         //发送缓冲区5
  42          #define         REG_TXBuffer6     SJA_BaseAdr+0x15         //发送缓冲区6
  43          #define         REG_TXBuffer7     SJA_BaseAdr+0x16         //发送缓冲区7
  44          #define         REG_TXBuffer8     SJA_BaseAdr+0x17         //发送缓冲区8
  45          #define         REG_TXBuffer9     SJA_BaseAdr+0x18         //发送缓冲区9
  46          #define         REG_TXBuffer10    SJA_BaseAdr+0x19         //发送缓冲区10
  47          #define         REG_TXBuffer11    SJA_BaseAdr+0x1A         //发送缓冲区11
  48          #define         REG_TXBuffer12    SJA_BaseAdr+0x1B         //发送缓冲区12
  49          #define         REG_TXBuffer13    SJA_BaseAdr+0x1C         //发送缓冲区13
  50          
  51          // 接收缓冲区寄存器
  52          #define         REG_RXBuffer1       SJA_BaseAdr+0x10       //接收缓冲区1
  53          #define         REG_RXBuffer2       SJA_BaseAdr+0x11       //接收缓冲区2
  54          #define         REG_RXBuffer3      SJA_BaseAdr+0x12        //接收缓冲区3
  55          #define         REG_RXBuffer4       SJA_BaseAdr+0x13       //接收缓冲区4
C51 COMPILER V9.51   SERVANT                                                               06/14/2016 18:11:39 PAGE 2   

  56          #define         REG_RXBuffer5      SJA_BaseAdr+0x14        //接收缓冲区5
  57          #define         REG_RXBuffer6     SJA_BaseAdr+0x15         //接收缓冲区6
  58          #define         REG_RXBuffer7     SJA_BaseAdr+0x16         //接收缓冲区7
  59          #define         REG_RXBuffer8     SJA_BaseAdr+0x17         //接收缓冲区8
  60          #define         REG_RXBuffer9     SJA_BaseAdr+0x18         //接收缓冲区9
  61          #define         REG_RXBuffer10     SJA_BaseAdr+0x19        //接收缓冲区10
  62          #define         REG_RXBuffer11     SJA_BaseAdr+0x1A        //接收缓冲区11
  63          #define         REG_RXBuffer12     SJA_BaseAdr+0x1B        //接收缓冲区12
  64          #define         REG_RXBuffer13     SJA_BaseAdr+0x1C        //接收缓冲区13
  65          
  66          #define         REG_RXCOUNT       SJA_BaseAdr+0x1D         //RX报文计数器
  67          #define         REG_RBSA          SJA_BaseAdr+0x1E         //接收缓冲区起始地址
  68          #define         REG_CDR           SJA_BaseAdr+0x1F         //时钟分频寄存器
  69          //功能说明:   CAN控制器SJA1000通讯波特率.SJA1000的晶振为必须为24MHZ*/
  70          #define         BTR0_Rate_10k      0xEF          //20KBPS的预设值
  71          #define         BTR1_Rate_10k      0xFF          //20KBPS的预设值
  72          
  73          /*
  74          功能说明:   CAN控制器SJA1000通讯波特率.SJA1000的晶振为必须为16MHZ*/
  75          
  76          #define         BTR0_Rate_20k      0x53          //20KBPS的预设值
  77          #define         BTR1_Rate_20k      0x2F          //20KBPS的预设值
  78          #define         BTR0_Rate_40k      0x87          //40KBPS的预设值
  79          #define         BTR1_Rate_40k      0xFF          //40KBPS的预设值
  80          #define         BTR0_Rate_50k      0x47          //50KBPS的预设值
  81          #define         BTR1_Rate_50k      0x2F          //50KBPS的预设值
  82          #define         BTR0_Rate_80k      0x83          //80KBPS的预设值
  83          #define         BTR1_Rate_80k      0xFF          //80KBPS的预设值
  84          #define         BTR0_Rate_100k     0x43          //100KBPS的预设值
  85          #define         BTR1_Rate_100k     0x2f          //100KBPS的预设值
  86          #define         BTR0_Rate_125k     0x03          //125KBPS的预设值
  87          #define         BTR1_Rate_125k     0x1c          //125KBPS的预设值
  88          #define         BTR0_Rate_200k     0x81          //200KBPS的预设值
  89          #define         BTR1_Rate_200k     0xFA          //200KBPS的预设值
  90          #define         BTR0_Rate_250k     0x01          //250KBPS的预设值
  91          #define         BTR1_Rate_250k     0x1c          //250KBPS的预设值
  92          #define         BTR0_Rate_400k     0x80          //400KBPS的预设值
  93          #define         BTR1_Rate_400k     0xfa          //400KBPS的预设值
  94          #define         BTR0_Rate_500k     0x00          //500KBPS的预设值
  95          #define         BTR1_Rate_500k     0x1c          //500KBPS的预设值
  96          #define         BTR0_Rate_666k     0x80          //666KBPS的预设值
  97          #define         BTR1_Rate_666k     0xb6          //666KBPS的预设值
  98          #define         BTR0_Rate_800k     0x00          //800KBPS的预设值
  99          #define         BTR1_Rate_800k     0x16          //800KBPS的预设值
 100          #define         BTR0_Rate_1000k    0x00          //1000KBPS的预设值
 101          #define         BTR1_Rate_1000k    0x14          //1000KBPS的预设值
 102          //BPS
 103          #define         ByteRate_10k       10 //24MHZ**********************
 104          #define         ByteRate_40k       40
 105          #define         ByteRate_50k       50
 106          #define         ByteRate_80k       80
 107          #define         ByteRate_100k      100
 108          #define         ByteRate_125k      125
 109          #define         ByteRate_200k      200
 110          #define         ByteRate_250k      250
 111          #define         ByteRate_400k      400
 112          #define         ByteRate_500k      500
 113          #define         ByteRate_800k      800
 114          #define         ByteRate_1000k     1000
 115          
 116          //命令字
 117          #define    TR_CMD     0X01
C51 COMPILER V9.51   SERVANT                                                               06/14/2016 18:11:39 PAGE 3   

 118          #define    AT_CMD     0X02
 119          #define    RRB_CMD    0X04
 120          #define    COS_CMD    0X08
 121          #define    SRR_CMD    0X10
 122          #define    GTS_CMD    0X10
 123          //错误字
 124          
 125          #define CAN_INTERFACE_OK      0
 126          #define CAN_BUS_OK            0
 127          #define CAN_INTERFACE_ERR     0XFF
 128          #define CAN_ENTERSET_ERR      0XFE
 129          #define CAN_QUITSET_ERR       0XFD
 130          #define CAN_INITOBJECT_ERR    0XFC
 131          #define CAN_INITBTR_ERR       0XFB
 132          #define CAN_INITOUTCTL_ERR    0XFA
 133          #define CAN_INTCLKDIV_ERR     0XF9
 134          #define CAN_BUS_ERR           0XF8
 135          
 136          // 定义通讯协议的发送命令标识宏
 137          #define SEND_COMMAND_QUERY_STATUS   (0x81)
 138          #define SEND_COMMAND_SET_PARAM      (0x82)
 139          #define SEND_COMMAND_QUERY_PARAM    (0x83)
 140          #define SEND_COMMAND_SET_ONOFF      (0x84)
 141          #define SEND_COMMAND_SET_RESET      (0x85)
 142          
 143          // 定义通讯协议的应答命令标识宏
 144          #define ANS_COMMAND_MODULE_STATUS (0x01)
 145          #define ANS_COMMAND_SET_PARAM     (0x02)
 146          #define ANS_COMMAND_MODULE_PARAM  (0x03)
 147          #define ANS_COMMAND_SET_ONOFF     (0x04)
 148          #define ANS_COMMAND_SET_RESET     (0x05)
 149          
 150          // 定义机器地址宏
 151          #define MASTER_ADDRESS            (0x01)
 152          #define SLAVE_A_ADDRESS           (0x02)
 153          #define SLAVE_B_ADDRESS           (0x04)
 154          #define SLAVE_C_ADDRESS           (0X08)
 155          #define MACHINE_ADDRESS           (SLAVE_B_ADDRESS)
 156          
 157          //系统指针，指向SJA1000
 158          unsigned char xdata *SJA_BCANAdr;
 159          unsigned char data    RevceData[10];
 160          unsigned char code table[]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90,0x88,0x83,0xc6,0xa1,0x86,0x8
             -e};
 161          sbit CS=P2^0;
 162          sbit SPK = P2^3;
 163          sbit Voice=P2^2;
 164          unsigned char frq; 
 165          unsigned char sendTo = SLAVE_B_ADDRESS;
 166          void DelayUs2x(unsigned char t)
 167          {   
 168   1       while(--t);
 169   1      }
 170          /*------------------------------------------------
 171           mS延时函数，含有输入参数 unsigned char t，无返回值
 172           unsigned char 是定义无符号字符变量，其值的范围是
 173           0~255 这里使用晶振12M，精确延时请使用汇编
 174          ------------------------------------------------*/
 175          void DelayMs(unsigned char t)
 176          {
 177   1           
 178   1       while(t--)
C51 COMPILER V9.51   SERVANT                                                               06/14/2016 18:11:39 PAGE 4   

 179   1       {
 180   2           //大致延时1mS
 181   2           DelayUs2x(245);
 182   2         DelayUs2x(245);
 183   2       }
 184   1      }
 185          void delay_ms(unsigned char t)
 186          {
 187   1           unsigned char i,j;
 188   1           for (i=0;i<t;i++)
 189   1            for(j=0;j<33;j++) 
 190   1            ;
 191   1          
 192   1      }
 193          void delay10ms(void) //延时程序
 194          
 195          {
 196   1      
 197   1            unsigned char i,j;
 198   1      
 199   1            for(i=20;i>0;i--)
 200   1      
 201   1            for(j=248;j>0;j--);
 202   1      
 203   1      }
 204          
 205          /****************************************************
 206          **函数原型：  void display(unsigned char num) 
 207          **功    能：  数码管显示
 208          **入口参数:   要显示字符 
 209          **出口参数:   无
 210          **说    明:   当SJA1000收到正确的报文时,然后显示出来           
 211          *****************************************************/
 212          void display(unsigned char num)  // 显示子函数
 213          {
 214   1              P1=table[num]; //将第num个显示编码送P1口
 215   1      }
 216          //***************************************************
 217          
 218          //初始化cpu
 219          
 220          //**************************************************
 221          void Init_Cpu(void)                                  //单片机初始化,开放外部中断0
 222          {
 223   1           PX0=1;
 224   1           EX0=1;
 225   1           IT0=0;
 226   1          // EA=1;
 227   1      }
 228          
 229          /*------------------------------------------------
 230                              串口初始化
 231          ------------------------------------------------*/
 232          void InitUART  (void)
 233          {
 234   1      
 235   1          SCON  = 0x50;           // SCON: 模式 1, 8-bit UART, 使能接收  
 236   1          TMOD |= 0x20;               // TMOD: timer 1, mode 2, 8-bit 重装
 237   1          TH1   = 0xFD;               // TH1:  重装值 9600 波特率 晶振 11.0592MHz  
 238   1          TR1   = 1;                  // TR1:  timer 1 打开                         
 239   1          EA    = 1;                  //打开总中断
 240   1       }                            
C51 COMPILER V9.51   SERVANT                                                               06/14/2016 18:11:39 PAGE 5   

 241          
 242          /*------------------------------------------------
 243                              发送一个字节
 244          ------------------------------------------------*/
 245          void SendByte(unsigned char dat)
 246          {
 247   1       SBUF = dat;
 248   1       while(!TI);
 249   1            TI = 0;
 250   1      }
 251          /*------------------------------------------------
 252                              发送一个字符串
 253          ------------------------------------------------*/
 254          void SendStr(unsigned char *s)
 255          {
 256   1       while(*s!='\0')// \0 表示字符串结束标志，
 257   1                      //通过检测是否字符串末尾
 258   1        {
 259   2        SendByte(*s);
 260   2        s++;
 261   2        }
 262   1      }
 263          
 264          //***********************************************************************
 265          /************************************************************************
 266          *函数原型: bit BCAN_SET_OUTCLK( unsigned char Clock_Out)               *
 267          *参数说明:                                                             *
 268          *          Clock_Out:存放时钟分频寄存器(CDR)的参数设置                 *
 269          *返回值:                                                               *
 270          *           0 ;设置成功                                                *
 271          *           1 ;设置失败                                                *
 272          *说明:设置SJA1000的时钟分频 。该子程序只能用于复位模式                      
 273          ************************************************************************/
 274          bit BCAN_SET_OUTCLK(unsigned char Clock_Out)
 275          {
 276   1        SJA_BCANAdr=REG_CDR;           
 277   1      
 278   1        *SJA_BCANAdr=Clock_Out;        
 279   1        if(*SJA_BCANAdr != Clock_Out)
 280   1           return 1; 
 281   1         else 
 282   1           return 0;
 283   1      } 
 284          
 285          /************************************************************************
 286          *函数原型: bit BCAN_SET_OBJECT(unsigned char  BCAN_ACR0,BCAN_ACR1,BCAN_ACR2,BCAN_ACR3     
 287                                                        BCAN_AMR0, BCAN_AMR1, BCAN_AMR2, BCAN_AMR3     
 288          *参数说明:                                                              *
 289          *    BCAN_ACR(0-3):存放验收代码寄存器（ACR）的参数设置                  *
 290          *    BCAN_AMR(0-3):存放接收屏蔽寄存器（AMR）的参数设置                  *
 291          *返回值:                                                                *
 292          *           0 ;设置成功                                                 *
 293          *           1 ;设置失败                                                 *
 294          *说明:设置CAN节点的通讯对象，允许接收的报文,是由AMR和ACR共同决定的.     *
 295          *************************************************************************/ 
 296          bit BCAN_SET_OBJECT(unsigned char  BCAN_ACR0,BCAN_ACR1,BCAN_ACR2,BCAN_ACR3,BCAN_AMR0,BCAN_AMR1,BCAN_AMR2,B
             -CAN_AMR3)
 297          {
 298   1        SJA_BCANAdr=REG_TXBuffer1;     
 299   1      
 300   1        *SJA_BCANAdr=BCAN_ACR0;        //写入参数
 301   1         
C51 COMPILER V9.51   SERVANT                                                               06/14/2016 18:11:39 PAGE 6   

 302   1        SJA_BCANAdr=REG_TXBuffer2;
 303   1        *SJA_BCANAdr=BCAN_ACR1;
 304   1      
 305   1        SJA_BCANAdr=REG_TXBuffer3;  
 306   1        *SJA_BCANAdr=BCAN_ACR2;
 307   1         
 308   1        SJA_BCANAdr=REG_TXBuffer4; 
 309   1        *SJA_BCANAdr=BCAN_ACR3;  
 310   1       
 311   1        //校验写入值
 312   1        if(*SJA_BCANAdr != BCAN_ACR3)  return 1; 
 313   1        
 314   1        SJA_BCANAdr=REG_TXBuffer5;      
 315   1      
 316   1        *SJA_BCANAdr=BCAN_AMR0;     //写入参数
 317   1        
 318   1        SJA_BCANAdr=REG_TXBuffer6;         
 319   1        *SJA_BCANAdr=BCAN_AMR1;
 320   1      
 321   1        SJA_BCANAdr=REG_TXBuffer7; 
 322   1        *SJA_BCANAdr=BCAN_AMR2;
 323   1      
 324   1        SJA_BCANAdr=REG_TXBuffer8; 
 325   1        *SJA_BCANAdr=BCAN_AMR3;
 326   1        //校验写入值
 327   1        if(*SJA_BCANAdr != BCAN_AMR3) return 1; 
 328   1      
 329   1        return 0;
 330   1      } 
 331          
 332          /************************************************************************
 333          ;*函数原型:  bit BCAN_SET_BANDRATE(unsigned char CAN_ByteRate)          *
 334          ;*返回值:                                                               *
 335          ;*           0 ;波特率设置成功                                          *
 336          ;*           1 ;波特率设置失败                                          *
 337          ;*                                                                      * 
 338          ;*说明:设置CAN控制器SJA1000通讯波特率.SJA1000的晶振必须为16MHZ,         *
 339          ;*     其它晶体的频率的值的波特率，需自己计算 。该子程序只能用于        *
 340          ;*     复位模式                                                         *  
 341          ;************************************************************************/ 
 342          bit BCAN_SET_BANDRATE(unsigned char CAN_ByteRate)         //波特率选择
 343          {
 344   1           unsigned char BR_Num= CAN_ByteRate,BTR0_num,BTR1_num;
 345   1             switch (BR_Num)
 346   1              {
 347   2                case ByteRate_10k:
 348   2                     BTR0_num=0xef;
 349   2                     BTR1_num=0xff;
 350   2                     break;
 351   2                case ByteRate_40k  :
 352   2                     BTR0_num=0x87;
 353   2                     BTR1_num=0xff;
 354   2                     break;
 355   2                case ByteRate_50k:
 356   2                     //BTR0_num=0x47;
 357   2                     //BTR1_num=0x2f;
 358   2                     BTR0_num=0x0e;
 359   2                     BTR1_num=0x1c;
 360   2                     break;
 361   2                case ByteRate_80k  :
 362   2                     //BTR0_num=0x83;
 363   2                     //BTR1_num=0xff;
C51 COMPILER V9.51   SERVANT                                                               06/14/2016 18:11:39 PAGE 7   

 364   2                     BTR0_num=0x49;                      //ok
 365   2                     BTR1_num=0x1b;
 366   2                     break;
 367   2                case ByteRate_100k  :
 368   2                     //BTR0_num=0x43;
 369   2                     //BTR1_num=0x2f;
 370   2                     BTR0_num=0x04;                       //ok
 371   2                     BTR1_num=0x1c;
 372   2                     break;
 373   2                case ByteRate_125k  :                      //SJA1000的晶振为必须为16MHZ,波特率设置为125kpbs
 374   2                     BTR0_num=0x03;
 375   2                     BTR1_num=0x1c;
 376   2                     //BTR0_num=0x44;                        //ok
 377   2                     //BTR1_num=0x1f;
 378   2                     break;
 379   2                case ByteRate_200k  ://24MHZ
 380   2                  //   BTR0_num=0xc5;  //
 381   2                   //  BTR1_num=0xa5;
 382   2                     BTR0_num=0x43;                        //ok
 383   2                     BTR1_num=0x1b;
 384   2                     break;
 385   2                case ByteRate_250k  ://24MHZ
 386   2                  //   BTR0_num=0xc5;  //
 387   2                   //  BTR1_num=0xa5;
 388   2                     BTR0_num=0x01;                        //ok
 389   2                     BTR1_num=0x1c;
 390   2                     break;
 391   2                /* case ByteRate_200k  ://24MHZ
 392   2                     BTR0_num=0x81;
 393   2                     BTR1_num=0xFA;
 394   2                     break;*/
 395   2                case ByteRate_400k  :
 396   2                     BTR0_num=0x80;
 397   2                     BTR1_num=0xfa;
 398   2                     break;
 399   2                case ByteRate_500k  :
 400   2                     BTR0_num=0x01;
 401   2                     BTR1_num=0x1c;
 402   2                     break;
 403   2                case ByteRate_800k  :
 404   2                     BTR0_num=0x00;
 405   2                     BTR1_num=0x16;
 406   2                     break;
 407   2                case ByteRate_1000k  :
 408   2                     BTR0_num=0x00;
 409   2                     BTR1_num=0x14;
 410   2                     break;
 411   2                default :
 412   2                     return 1;
 413   2                     break;
 414   2              }
 415   1      
 416   1          SJA_BCANAdr=REG_BTR0;
 417   1          *SJA_BCANAdr=BTR0_num;
 418   1          if(*SJA_BCANAdr!=BTR0_num)
 419   1            {return 1;}
 420   1          SJA_BCANAdr=REG_BTR1;
 421   1          *SJA_BCANAdr=BTR1_num;
 422   1          if(*SJA_BCANAdr!=BTR1_num)
 423   1            {return 1;}
 424   1          return 0;
 425   1      }
C51 COMPILER V9.51   SERVANT                                                               06/14/2016 18:11:39 PAGE 8   

 426          /************************************************************************
 427           *函数原型: bit BCAN_SET_CONTROL(unsigend char CMD)                     *
 428           *参数说明: 设置控制寄存器                                              *
 429           ************************************************************************/
 430          bit BCAN_SET_CONTROL(unsigned char CMD)
 431          {  unsigned char TempData;
 432   1       
 433   1        SJA_BCANAdr=REG_CONTROL;   //SJA_BaseAdr+0x00  控制寄存器
 434   1        TempData=  *SJA_BCANAdr; 
 435   1       
 436   1        *SJA_BCANAdr=CMD;
 437   1       
 438   1        if (*SJA_BCANAdr == CMD)
 439   1          return 0;
 440   1        else
 441   1          return 1;
 442   1      
 443   1      }
 444          /************************************************************************
 445           *函数原型:  bit   BCAN_CREATE_COMMUNATION(void)                        * 
 446           *参数说明:  无                                                         *
 447           *返回值:                                                               *
 448           *           0 ; 表示SJA1000接口正常                                    *
 449           *           1 ; 表示SJA1000与处理器接口不正常                          *
 450           *说明:该函数用于检测CAN控制器的接口是否正常                            *
 451           ************************************************************************/
 452           bit BCAN_CREATE_COMMUNATION(void)
 453           {  
 454   1          SJA_BCANAdr=REG_TEST;      
 455   1          *SJA_BCANAdr=0xaa;       //写入测试值
 456   1          if(*SJA_BCANAdr == 0xaa)
 457   1             return 0;            //读测试正确
 458   1          else
 459   1             return 1;
 460   1           
 461   1       }
 462          
 463           /************************************************************************
 464           *函数原型:      bit   BCAN_ENTER_RETMODEL(void)                        *
 465           *参数说明:  无                                                         *
 466           *返回值:                                                               *
 467           *           0 ; 表示成功进入复位工作模式                               *
 468           *           1 ; 表示不能进入复位工作模式                               *
 469           *                                                                      * 
 470           *说明:      CAN控制器进入复位工作模式                                  *
 471           ************************************************************************/ 
 472           bit   BCAN_ENTER_RETMODEL(void)     //置位复位请求
 473           {
 474   1          unsigned   char   TempData;
 475   1          SJA_BCANAdr  = REG_CONTROL;   
 476   1      
 477   1        TempData=  *SJA_BCANAdr;       
 478   1          *SJA_BCANAdr=0x01;                 //置位复位请求 和单滤波模式
 479   1          if((*SJA_BCANAdr&0x01) == 1)
 480   1           return   0;
 481   1          else
 482   1            return   1;   
 483   1       } 
 484          /************************************************************************
 485           *函数原型:   BCAN_CMD_PRG(unsigned char cmd)                           *
 486           *参数说明:  unsigned char cmd                                          *
 487           *返回值:                                                               *
C51 COMPILER V9.51   SERVANT                                                               06/14/2016 18:11:39 PAGE 9   

 488           *           0 ; 请求成功                                               *
 489           *           1 ; 请求失败                                               *
 490           *                                                                      * 
 491           *说明:      启动命令字                                                 *
 492           ************************************************************************/
 493          bit  BCAN_CMD_PRG(unsigned char cmd)
 494           {
 495   1         SJA_BCANAdr=REG_COMMAND;            //访问地址指向命令寄存器
 496   1         *SJA_BCANAdr=cmd;                   //启动命令字
 497   1       
 498   1         switch(cmd)
 499   1         {    case  TR_CMD:                    
 500   2      
 501   2                 return    0;
 502   2                 break;
 503   2      
 504   2        case  SRR_CMD:      
 505   2      
 506   2            return 0;
 507   2           break;
 508   2          
 509   2        case  AT_CMD:                  
 510   2      
 511   2                  SJA_BCANAdr = REG_STATUS;   //访问地址指向状态寄存器   
 512   2                 if((*SJA_BCANAdr & 0x20)==0) //判断是否正在发送
 513   2                   return  0;
 514   2                 else
 515   2                   return  1;              
 516   2                 break; 
 517   2           case  RRB_CMD:                   
 518   2                 SJA_BCANAdr = REG_STATUS;   //访问地址指向状态寄存器   
 519   2                 if((*SJA_BCANAdr & 0x01)==1)
 520   2                    return  1;
 521   2                 else           
 522   2                    return  0;               
 523   2                 break;  
 524   2           case  COS_CMD:                  
 525   2      
 526   2                 SJA_BCANAdr = REG_STATUS;   
 527   2                 if((*SJA_BCANAdr & 0x02)==0)//判断清除超载是否成功
 528   2                   return  0; 
 529   2                 else
 530   2                   return  1;             
 531   2                 break; 
 532   2           default:
 533   2                   return  1;
 534   2                   break; 
 535   2         }
 536   1      }
 537          
 538          
 539          unsigned char BCAN_DATA_WRITE(unsigned char *SendDataBuf)
 540           {  unsigned char temp;
 541   1         
 542   1          SJA_BCANAdr = REG_STATUS;    
 543   1          temp=*SJA_BCANAdr;
 544   1      
 545   1          if ((temp&0x08)==0) return  1;    //上次发送未完成
 546   1          if ((temp&0x04)==0) return  2;    //发送缓冲区是否锁定 
 547   1          if ((temp&0x10)==0x10) return 3;  //判断是否正在接收   
 548   1      
 549   1          SJA_BCANAdr = REG_RXBuffer1;      //访问地址指向发送缓冲区1,修改成头文件
C51 COMPILER V9.51   SERVANT                                                               06/14/2016 18:11:39 PAGE 10  

 550   1      
 551   1          memcpy(SJA_BCANAdr,SendDataBuf,4);   
 552   1          BCAN_CMD_PRG(TR_CMD);             //请求发送         
 553   1          return 0;
 554   1      }
 555          
 556          //CAN发送任意长度字节
 557          void CAN_Send_anylength(unsigned char *CAN_TX_Buf, unsigned char length1, unsigned char com)
 558          {
 559   1        unsigned char temptt;
 560   1        loop:
 561   1          SJA_BCANAdr = REG_STATUS;    
 562   1               temptt=*SJA_BCANAdr; 
 563   1        //temptt=Read_SJA1000(REG_STATUS);
 564   1        if((temptt&0x04)==0x00)  goto loop;               //循环检测等待                       
 565   1        //可以向发送缓冲器写数据
 566   1        {
 567   2          SJA_BCANAdr  = REG_RXBuffer1;      //访问地址指向发送缓冲区1,修改成头文件
 568   2          *SJA_BCANAdr = length1 + 1;  
 569   2          SJA_BCANAdr  = REG_RXBuffer2;      //访问地址指向发送缓冲区1,修改成头文件
 570   2          *SJA_BCANAdr = MASTER_ADDRESS;  
 571   2          SJA_BCANAdr  = REG_RXBuffer3;     //访问地址指向发送缓冲区1,修改成头文件
 572   2          *SJA_BCANAdr = MACHINE_ADDRESS;
 573   2          SJA_BCANAdr  = REG_RXBuffer4;
 574   2          *SJA_BCANAdr = com;
 575   2          SJA_BCANAdr  = REG_RXBuffer5;
 576   2          memcpy(SJA_BCANAdr,CAN_TX_Buf,length1);   
 577   2        //数据发送请求
 578   2          BCAN_CMD_PRG(TR_CMD);            //请求发送  
 579   2        }
 580   1      }
 581          
 582          //CAN发送一个字节
 583          void CAN_Send_onebyte(unsigned char CAN_TX_data, unsigned char com)
 584          {
 585   1        unsigned char temptt;
 586   1        loop:
 587   1          SJA_BCANAdr = REG_STATUS;    
 588   1               temptt=*SJA_BCANAdr; 
 589   1        //temptt=Read_SJA1000(REG_STATUS);
 590   1        if((temptt&0x04)==0x00)  goto loop;               //循环检测等待                       
 591   1        //可以向发送缓冲器写数据
 592   1        {
 593   2          SJA_BCANAdr  = REG_RXBuffer1;      //访问地址指向发送缓冲区1,修改成头文件
 594   2          *SJA_BCANAdr = 2;  
 595   2          SJA_BCANAdr  = REG_RXBuffer2;      //访问地址指向发送缓冲区1,修改成头文件
 596   2          *SJA_BCANAdr = MASTER_ADDRESS;  
 597   2           SJA_BCANAdr = REG_RXBuffer3;     //访问地址指向发送缓冲区1,修改成头文件
 598   2          *SJA_BCANAdr = MACHINE_ADDRESS;
 599   2          SJA_BCANAdr  = REG_RXBuffer4;
 600   2          *SJA_BCANAdr = com;
 601   2          //memcpy(SJA_BCANAdr,CAN_TX_Buf,length1);
 602   2          SJA_BCANAdr  = REG_RXBuffer5;
 603   2          *SJA_BCANAdr=CAN_TX_data; 
 604   2        //数据发送请求
 605   2          BCAN_CMD_PRG(TR_CMD);            //请求发送  
 606   2        }
 607   1      }
 608          
 609          
 610          /****************************************************
 611          **函数原型：   bit Sja_1000_Init(void)
C51 COMPILER V9.51   SERVANT                                                               06/14/2016 18:11:39 PAGE 11  

 612          **功    能：   初始化SJA10000
 613          **入口参数:    无 
 614          **返 回 值:     
 615                0： 初始化成功 
 616                1： 复位失败 
 617                2:  测试sja1000失败 
 618                3： 设置失败 
 619                4： 设置验收滤波器失败
 620                5： 设置波特率失败     
 621          *****************************************************/
 622          unsigned char Sja_1000_Init(void)
 623          {
 624   1        bit s; 
 625   1        EA=0;                                 //关总中断
 626   1        
 627   1        s=BCAN_ENTER_RETMODEL();
 628   1        if (s==1) return 1; 
 629   1        
 630   1        s=BCAN_CREATE_COMMUNATION();       //建立通信
 631   1        if (s==1) return 2;
 632   1      
 633   1        s=BCAN_SET_OUTCLK(0xC8);             //Pelican
 634   1        if (s==1) return 3;
 635   1      
 636   1        //s=BCAN_SET_OBJECT(0xFF,0x4E,0x16,0x00,0xff,0xff,0xff,0xff);//屏蔽寄存器，都设为无关，接收所有报文
 637   1        //s=BCAN_SET_OBJECT(0x01,0xe0,0x02,0xe0,0x00,0x0f,0x00,0x0f);//屏蔽寄存器，都设为无关，接收所有报文 
 638   1             //当屏蔽位为1，不滤波，0就滤波必须相等
 639   1        s=BCAN_SET_OBJECT(MACHINE_ADDRESS,MASTER_ADDRESS,MACHINE_ADDRESS,MASTER_ADDRESS,0X00,0X00,0X00,0X00);
 640   1        //s=BCAN_SET_OBJECT(0x55,0xe0,0xaa,0xa1,0x00,0x00,0xff,0xff);//验收码&屏蔽码
 641   1        if (s==1) return 4;
 642   1      
 643   1        s=BCAN_SET_BANDRATE(ByteRate_125k);    //设置波特率125K 16MHZ
 644   1        if (s==1) return 5;
 645   1          
 646   1        SJA_BCANAdr=REG_OCR ;                  //输出控制寄存器  
 647   1        *SJA_BCANAdr=0x1a;        
 648   1        SJA_BCANAdr=REG_INTENABLE;      
 649   1        *SJA_BCANAdr=0x1D;                  //设置中断，接收和发送中断
 650   1          
 651   1        SJA_BCANAdr=REG_CONTROL;            //退出 复位模式
 652   1        *SJA_BCANAdr=*SJA_BCANAdr&0xfe;
 653   1        if(*SJA_BCANAdr!=0x00)
 654   1        return 6;
 655   1      
 656   1        EA=1;
 657   1        return 0;   
 658   1      } 
 659          
 660          /****************************************************
 661          **函数原型：  void AnsData(unsigned char com)
 662          **功    能：  应答数据
 663          **入口参数:   unsigned char com 接收到的命令
 664          **出口参数:   无  
 665          **说    明:   根据接收到的命令做相应的应答          
 666          *****************************************************/
 667          void AnsData(unsigned char com)
 668          {
 669   1          switch (com)
 670   1          {
 671   2            case 0x81:CAN_Send_onebyte(10, ANS_COMMAND_MODULE_STATUS);break;
 672   2           // case 0x82:CAN_Send_onebyte(11, ANS_COMMAND_SET_PARAM);break;
 673   2            case 0x83:CAN_Send_onebyte(0, ANS_COMMAND_MODULE_PARAM);break;
C51 COMPILER V9.51   SERVANT                                                               06/14/2016 18:11:39 PAGE 12  

 674   2            case 0x84:CAN_Send_onebyte(13, ANS_COMMAND_SET_ONOFF);break;
 675   2            case 0x85:CAN_Send_onebyte(14, ANS_COMMAND_SET_RESET);break;
 676   2            default:break;
 677   2          }
 678   1          //display(11);
 679   1      }
 680          
 681          /****************************************************
 682          **函数原型：  void ex0_int(void) interrupt 0 //using 1
 683          **功    能：  中断接收函数
 684          **入口参数:   无 
 685          **出口参数:   RevceData[]数组   
 686          **说    明:   当sja1000 收到正确的报文时,会产生int中断           
 687          *****************************************************/
 688          void ex0_int(void) interrupt 0 using 1
 689          {  
 690   1        unsigned char tt,tt1,length,com = 0;
 691   1       
 692   1        SJA_BCANAdr=REG_INTERRUPT;
 693   1        if((*SJA_BCANAdr)&0x01)                   //产生了接收中断
 694   1        {  
 695   2          SJA_BCANAdr=REG_RXBuffer1;
 696   2          tt=*SJA_BCANAdr;
 697   2          tt1=*SJA_BCANAdr;
 698   2          length=tt1&0x0F;
 699   2          if ((tt&0x40)!=0x40)                   //数据帧   = 为远程帧
 700   2          {  
 701   3              SJA_BCANAdr = REG_RXBuffer4;              //宏定义的变量不能memcpy(RevceData,REG_RXBuffer4,8);
 702   3            com = *SJA_BCANAdr;
 703   3            SJA_BCANAdr = REG_RXBuffer5;
 704   3            memcpy(RevceData,SJA_BCANAdr,length - 1);    //功能：由src所指内存区域复制count个字节到dest所指内存区域
 705   3              display(RevceData[0]);
 706   3            AnsData(com);                  // 根据命令应答
 707   3          }
 708   2          BCAN_CMD_PRG(RRB_CMD);                  //释放SJA1000接收缓冲区，****已经修改
 709   2        }
 710   1      } 
 711          
 712          /****************************************************
 713          **函数原型：   void main(void)
 714          **功    能：   主程序部分:
 715          **入口参数:    无 
 716          **返 回 值:     
 717          *****************************************************/
 718          void main(void)
 719          {  
 720   1        unsigned char ss;
 721   1        unsigned char num=0;
 722   1         unsigned int i;
 723   1        Voice = 1;
 724   1        CS=0;                //片选择引脚
 725   1        EA=0;
 726   1        
 727   1        Init_Cpu(); 
 728   1        InitUART();     //初始化串口 
 729   1      
 730   1        
 731   1        ss=Sja_1000_Init();  //初始化SJA1000     
 732   1         
 733   1        if (ss!=0)             //初始化失败
 734   1        {
 735   2          SendStr("Sja_1000_Init() failure");              //测试专用发送到串口看状态
C51 COMPILER V9.51   SERVANT                                                               06/14/2016 18:11:39 PAGE 13  

 736   2          display(ss);                                      // 显示错误信息
 737   2        }
 738   1          else
 739   1        {
 740   2          SendStr("Sja_1000_Init() sucess");  
 741   2          EA=1; //初始化成功，开总中断
 742   2          display(11);      //显示该板号B 
 743   2        }
 744   1      
 745   1        while(1) 
 746   1        {        
 747   2      
 748   2          if(!Voice)
 749   2          {
 750   3          CAN_Send_onebyte(11,0x83);
 751   3      
 752   3          } 
 753   2      
 754   2            if(RevceData[0] == 3)
 755   2            {
 756   3            for(i=0;i<500;i++)
 757   3            {
 758   4            DelayUs2x(500); 
 759   4          SPK=!SPK;
 760   4          }
 761   3          SPK=0;//防止一直给喇叭通电造成损坏
 762   3         for(i=0;i<500;i++)
 763   3            {
 764   4            DelayMs(1);  
 765   4            }    
 766   3            CAN_Send_onebyte(8,0x83);
 767   3            }
 768   2        }   
 769   1      }
 770          
 771          
 772          // @author:罗浩菘
 773          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1302    ----
   CONSTANT SIZE    =     63    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14      26
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
